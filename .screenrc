# NOTE {{{1


# OPTION {{{1
defkanji        utf-8
defencoding     utf-8
encoding        utf-8 utf-8

autodetach      on
bell_msg        "^G"
startup_message off
vbell           off
defscrollback   10000
altscreen       on
defmonitor      on

hardcopydir     "%HOME/screen"

termcapinfo xterm* 'Co#256:pa#256:AB=\E[48;5;%dm:AF=\E[38;5;%dm:' # for 256 color
termcapinfo xterm* 'is=\E[r\E[m\E[2J\E[H\E[?7h\E[?1;4;6l' # for resize
attrcolor b ".I"
defbce "on"


# WINDOW {{{1
rendition bell    "=U"  "rk"
rendition monitor "=b"  "RW"
rendition so      "=b"  "wk"
caption     always         "%?%F%{= bw}%?%?%P%{= rw}%?%n %t%?%P -- COPY MODE --%?%=%{-}"
hardstatus  alwayslastline "%-w%{bu bw}%50>%n %t%{-}%+w%<%=[%H:%l][%Y/%m/%d %c:%s]"


# KEY MAP {{{1


bind  n screen
bind ^v copy
bind  p paste .
bind  q remove
bind  ; colon

bind  s split
bind  v split -v
bind  S eval split focus screen
bind  V eval 'split -v' focus screen

# copy mode {{{2
# TODO:more like visual mode of vim
markkeys Y=y:y=Y
bindkey -m -t  Y stuff " $ "
bindkey -m -t  v stuff " "
bindkey -m -t  V stuff "0 "
bindkey -m -t ^v stuff "c "

# window focus {{{2
bind ^n next
bind ^p prev
bind  h focus left
bind  j focus down
bind  k focus up
bind  l focus right

# for window region {{{2
bind                  ^w eval 'command -c window_region' 'echo "region window"'
bind                   w eval 'command -c window_region' 'echo "region window"'
# bind                  ^n eval next          'command -c window_region' 'echo "region window"'
# bind                  ^p eval prev          'command -c window_region' 'echo "region window"'
# bind                   s eval split         'command -c window_region' 'echo "region window"'
# bind                   v eval 'split -v'    'command -c window_region' 'echo "region window"'
# bind                   h eval 'focus left'  'command -c window_region' 'echo "region window"'
# bind                   j eval 'focus down'  'command -c window_region' 'echo "region window"'
# bind                   k eval 'focus up'    'command -c window_region' 'echo "region window"'
# bind                   l eval 'focus right' 'command -c window_region' 'echo "region window"'
bind -c window_region ^n eval next          'command -c window_region'
bind -c window_region ^p eval prev          'command -c window_region'
bind -c window_region  s eval split         'command -c window_region'
bind -c window_region  v eval 'split -v'    'command -c window_region'
bind -c window_region  h eval 'focus left'  'command -c window_region'
bind -c window_region  j eval 'focus down'  'command -c window_region'
bind -c window_region  k eval 'focus up'    'command -c window_region'
bind -c window_region  l eval 'focus right' 'command -c window_region'
bind -c window_region ^l windowlist -b
bind -c window_region  q remove
bind -c window_region  Q only
bind -c window_region  K kill
bind -c window_region  r eval 'command -c window_resize' 'echo "resize mode"'

#resize {{{2
bind                 ^r eval 'command -c window_resize' 'echo "resize mode"'
bind                  r eval 'command -c window_resize' 'echo "resize mode"'
bind                  + eval 'resize -v +1' 'command -c window_resize' 'echo "resize mode"'
bind                  - eval 'resize -v -1' 'command -c window_resize' 'echo "resize mode"'
bind                  > eval 'resize -h +1' 'command -c window_resize' 'echo "resize mode"'
bind                  < eval 'resize -h -1' 'command -c window_resize' 'echo "resize mode"'
bind                  = eval 'resize ='     'command -c window_resize' 'echo "resize mode"'
bind                  _ eval 'resize max'   'command -c window_resize' 'echo "resize mode"'
bind -c window_resize + eval 'resize -v +1' 'command -c window_resize' 'echo "resize mode"'
bind -c window_resize - eval 'resize -v -1' 'command -c window_resize' 'echo "resize mode"'
bind -c window_resize > eval 'resize -h +1' 'command -c window_resize' 'echo "resize mode"'
bind -c window_resize < eval 'resize -h -1' 'command -c window_resize' 'echo "resize mode"'
bind -c window_resize = eval 'resize ='     'command -c window_resize' 'echo "resize mode"'
bind -c window_resize _ eval 'resize max'   'command -c window_resize' 'echo "resize mode"'
bind -c window_resize w eval 'command -c window_region' 'echo "region window"'


# layout {{{2
bind                  ^l eval 'command -c layout_region' 'layout show'
bind -c layout_region  n eval  'layout new' 'echo "create new layout"'
bind -c layout_region ^n eval  'layout next' 'command -c layout_region' 'layout show'
bind -c layout_region ^p eval  'layout prev' 'command -c layout_region' 'layout show'
bind -c layout_region  A colon 'layout title '
bind -c layout_region  q eval  'layout remove'   'layout show'
bind -c layout_region  s eval  'layout select'   'layout show'
bind -c layout_region  0 eval  'layout select 0' 'layout show'
bind -c layout_region  1 eval  'layout select 1' 'layout show'
bind -c layout_region  2 eval  'layout select 2' 'layout show'
bind -c layout_region  3 eval  'layout select 3' 'layout show'
bind -c layout_region  4 eval  'layout select 4' 'layout show'
bind -c layout_region  5 eval  'layout select 5' 'layout show'
bind -c layout_region  6 eval  'layout select 6' 'layout show'
bind -c layout_region  7 eval  'layout select 7' 'layout show'
bind -c layout_region  8 eval  'layout select 8' 'layout show'
bind -c layout_region  9 eval  'layout select 9' 'layout show'


# other source {{{1

# scpace code
# MEMO: do not setting escape from .screenrc
#       I will set escape from command line optoinns
#       also % screen -e"^Gt"
# source $HOME/dotfiles/keymap.screenrc
# TEST OPTIONS {{{1


# END {{{1
# vim:smarttab expandtab :
# vim:foldmethod=marker :


